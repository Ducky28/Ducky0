[include fluidd.cfg]
[virtual_sdcard]
path: /home/pi/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

# This file contains common pin mappings for the BigTreeTech SKR 3.
# To use this config, the firmware should be compiled for the
# STM32H743 with a "128KiB bootloader".

# See docs/Config_Reference.md for a description of parameters.

[include mainsail.cfg]
# This file contains common pin mappings for the BIGTREETECH SKR3
# To use this config, the firmware should be compiled for the
#[*] Enable extra low-level configuration options
#Micro-controller Architecture = STMicroelectronics STM32
#Processor model = STM32H723
#Bootloader offset = (128KiB bootloader (SKR SE BX v2.0))
#Clock Reference = 25 MHz crystal
#Communication interface = USB (on PA11/PA12)

# The "make flash" command does not work on the SKR3. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR3
# with that SD card.

## *** THINGS TO CHANGE/CHECK: ***
## MCU path                                                                     [mcu] section
## Z and Extruder motor currents                                                [tmc2209 stepper_*] sections. Uncomment the stepper motor you have
## Full steps per rotation for Extruder                                         [extruder] section
## Thermistor types                                                             [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Motor currents                                                               [extruder] [stepper] and [_HOME_X/Y] macro sections
## PID tune                                                                     [extruder] and [heater_bed] sections
## Fine tune E steps                                                            [extruder] section
## For more info                                                                check https://docs.vorondesign.com/build/startup/#v0

[mcu]
#####################################################################
# Obtain definition by "ls -l /dev/serial/by-id/"
#####################################################################
serial: /dev/serial/by-id/usb-Klipper_stm32h723xx_2E0025000851313332323730-if00

[mcu nhk]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_rp2040_303339383409635B-if00
restart_method: command
##--------------------------------------------------------------------

[mcu expander]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_220024000843565036343620-if00
restart_method: command

[temperature_sensor mcu_temp]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 100

[temperature_sensor host_temp]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[printer]
kinematics: corexy
max_velocity: 1000
max_accel: 120000
max_z_velocity: 180
max_z_accel: 5000
square_corner_velocity: 120
minimum_cruise_ratio: 0.0

[stepper_y]
step_pin: PD4
dir_pin: !PD3
enable_pin: !PD6
microsteps: 32
rotation_distance: 40
full_steps_per_rotation: 200    
endstop_pin: tmc5160_stepper_x:virtual_endstop
position_endstop: 120
position_max: 120
homing_speed: 80
homing_retract_dist: 0
homing_positive_dir: True

[tmc5160 stepper_y]
cs_pin: PD5
#spi_bus: spi1
spi_software_miso_pin: PE15
spi_software_mosi_pin: PE13
spi_software_sclk_pin: PE14
run_current: 2.5
interpolate: True
sense_resistor: 0.033
driver_SGT: 1
stealthchop_threshold: 0
diag0_pin: ^!PC1

[stepper_x]
step_pin: PA15
dir_pin: !PA8
enable_pin: !PD1
microsteps: 32
rotation_distance: 40
full_steps_per_rotation: 200    
endstop_pin: tmc5160_stepper_y:virtual_endstop
position_endstop: 120
position_max: 120
homing_speed: 80
homing_retract_dist: 0
homing_positive_dir: True

[tmc5160 stepper_x]
cs_pin: PD0
#spi_bus: spi2
spi_software_miso_pin: PE15
spi_software_mosi_pin: PE13
spi_software_sclk_pin: PE14
run_current: 2.5
interpolate: True
sense_resistor: 0.033
driver_SGT: 1
stealthchop_threshold: 0
diag0_pin: ^!PC3

[stepper_z]
step_pin: PE2
dir_pin: PE3
enable_pin: !PE0
microsteps: 32
rotation_distance: 8
endstop_pin: ^PC0
#position_endstop: 120
position_max: 110
position_min: -1.5
homing_speed: 50
second_homing_speed: 3.0
homing_retract_dist: 5.0

[tmc2209 stepper_z]
uart_pin: PE1
run_current: 0.7
#uart_address: 1
#diag_pin:
sense_resistor: 0.110
interpolate: True
stealthchop_threshold: 0

[extruder]
step_pin: nhk:gpio23
dir_pin: nhk:gpio24
enable_pin: !nhk:gpio25
gear_ratio: 50:8    
microsteps: 128
rotation_distance: 21.384
nozzle_diameter: 0.600
filament_diameter: 1.750
heater_pin: PB3
sensor_type: PT1000
sensor_pin: nhk:gpio29
pullup_resistor: 2200
#control = pid
#pid_kp = 18.663
#pid_ki = 0.943
#pid_kd = 92.384
min_temp: 0
min_extrude_temp: 0
max_temp: 400
max_extrude_only_distance: 200
max_extrude_cross_section: 8
pressure_advance_smooth_time: 0.020

[tmc2209 extruder]
sense_resistor: 0.100
uart_pin: nhk:gpio0
tx_pin: nhk:gpio1
run_current: 0.85
interpolate: False
stealthchop_threshold: 0    

#[extruder1]
#step_pin: PD11
#dir_pin: PD10
#enable_pin: !PD13
#heater_pin: PB4
#sensor_pin: PA3
#...

[temperature_sensor a_motor]
sensor_type: Generic 3950
sensor_pin: PA2
min_temp: 0
max_temp: 180
#   See the "extruder" section for the definition of the above
#   parameters.
#gcode_id:
#   See the "heater_generic" section for the definition of this
#   parameter.
[temperature_sensor b_motor]
sensor_type: Generic 3950
sensor_pin: PA3
min_temp: 0
max_temp: 180
#   See the "extruder" section for the definition of the above
#   parameters.
#gcode_id:
#   See the "heater_generic" section for the definition of this
#   parameter.

[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: expander:PA6
min_temp: 0
max_temp: 80
#   See the "extruder" section for the definition of the above
#   parameters.
#gcode_id:
#   See the "heater_generic" section for the definition of this
#   parameter.

[temperature_sensor chamber_bottom]
sensor_type: Generic 3950
sensor_pin: expander:PA5
min_temp: 0
max_temp: 80
#   See the "extruder" section for the definition of the above
#   parameters.
#gcode_id:
#   See the "heater_generic" section for the definition of this
#   parameter.

[temperature_sensor chamber]
sensor_type: Generic 3950
sensor_pin: expander:PA6
min_temp: 0
max_temp: 180
#   See the "extruder" section for the definition of the above
#   parameters.
#gcode_id:
#   See the "heater_generic" section for the definition of this
#   parameter.

[heater_bed]
heater_pin: PD7
sensor_type: Generic 3950
sensor_pin: PA1
control = pid
pid_kp = 57.640
pid_ki = 2.448
pid_kd = 339.358
min_temp: 0
max_temp: 120

#[output_pin big_fan_power]
#pin: PB4
#value: 1
#shutdown_value: 0 #turn big fan power off when MCU is shut down

[fan_generic fan2]
pin: !PB7
shutdown_speed: 0
cycle_time: 0.00004
enable_pin: expander:PA1
off_below: 0.06
hardware_pwm: false

[controller_fan fan_0]
pin: PB6
cycle_time: 0.005
fan_speed: 1.0
idle_speed: 0.35
shutdown_speed: 0
#heater: none
stepper: stepper_x, stepper_y

[fan_generic fan3]
pin: !expander:PA2
cycle_time: 0.00004
shutdown_speed: 0
off_below: 0.12
enable_pin: expander:PA3
hardware_pwm: false

[fan_generic fan0]
pin: nhk:gpio6
cycle_time: 0.005
shutdown_speed: 0
off_below: 0.06
kick_start_time: 0.100


[heater_fan hotend_fan]
pin: nhk:gpio5
tachometer_pin: nhk:gpio16
tachometer_ppr: 2
tachometer_poll_interval: 0.0009

[controller_fan big_motor_fan]
pin: expander:PA0
cycle_time: 0.02
fan_speed: 1.0
idle_speed: 0.1
kick_start_time: 0.500
shutdown_speed: 0
stepper: stepper_x, stepper_y

[controller_fan z_motor_fan]
pin: PB5
cycle_time: 0.02
fan_speed: 1.0
idle_speed: 0.1
kick_start_time: 0.500
shutdown_speed: 0
stepper: stepper_z

#####################################################################
#   Accelerometer
#####################################################################
[adxl345]
cs_pin: nhk:gpio27
spi_software_sclk_pin: nhk:gpio18
spi_software_mosi_pin: nhk:gpio20
spi_software_miso_pin: nhk:gpio19

[resonance_tester]
probe_points: 
    60, 60, 30
accel_chip: adxl345
min_freq: 5
max_freq: 200
accel_per_hz: 75

[input_shaper]
shaper_freq_x: 93.0
shaper_freq_y: 80.4
shaper_type_x: mzv
shaper_type_y: mzv
damping_ratio_x: 0.037
damping_ratio_y: 0.04

[exclude_object]

#####################################################################
# Neopixel stuff
#####################################################################

[neopixel chamber_led]
pin: PE6
chain_count: 20
color_order: GRB
initial_RED: 0.5
initial_GREEN: 0.5
initial_BLUE: 0.4
initial_WHITE: 0.0

[led_effect critical_error]
leds:
    neopixel:chamber_led
layers:
    strobe         1  1.5   add        (1.0,  1.0, 1.0)
    breathing      2  0     difference (0.95, 0.0, 0.0)
    static         1  0     top        (1.0,  0.0, 0.0)
autostart:                             false
frame_rate:                            24
run_on_error:                          true

[led_effect panel_rainbow]
autostart:              false
frame_rate:             60
leds:
    neopixel:chamber_led
layers:
    gradient 1 1 top (1.0, 0.0, 0.0),(0.0, 1.0, 0.0),(0.0, 0.0, 1.0)

[led_effect LED_ON_HIGH]
autostart:              false
frame_rate:             1
leds:
    neopixel:chamber_led
layers:
    static 1 1 top (1.0, 1.0, 0.8)

[led_effect LED_ON_MED]
autostart:              false
frame_rate:             1
leds:
    neopixel:chamber_led
layers:
    static 1 1 top (0.35, 0.35, 0.25)

[led_effect LED_ON_LOW]
autostart:              false
frame_rate:             1
leds:
    neopixel:chamber_led
layers:
    static 1 1 top (0.1, 0.1, 0.05)

[led_effect LED_OFF]
autostart:              false
frame_rate:             1
leds:
    neopixel:chamber_led
layers:
    static 1 1 top (0.0, 0.0, 0.0)

#####################################################################
#   Filament Runout Sensor
#####################################################################

[filament_switch_sensor Filament_Runout_Sensor]
pause_on_runout: True
runout_gcode: PAUSE
switch_pin: PC2

#####################################################################
# TMC Autotune
#####################################################################

[motor_constants my_custom_motor]
# Coil resistance, Ohms
resistance: 1.30
# Coil inductance, Henries
inductance: 0.0021
# Holding torque, Nm
holding_torque: 0.40
# Nominal rated current, Amps
max_current: 2
# Steps per revolution (1.8deg motors use 200, 0.9deg motors use 400)
steps_per_revolution: 200

[autotune_tmc stepper_x]
motor: my_custom_motor
voltage: 48
tuning_goal: performance
sgt: 1

[autotune_tmc stepper_y]
motor: my_custom_motor
voltage: 48
tuning_goal: performance
sgt: 1

[autotune_tmc stepper_z]
motor: moons-le174s-t0808-200-ar3-s-065
tuning_goal: performance

[autotune_tmc extruder]
motor: ldo-36sth20-1004ahg
tuning_goal: performance

#####################################################################
# Macros
#####################################################################

[include KAMP_Settings.cfg]

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
#gcode:
    #G28                            ; home all axes
    #G90                            ; absolute positioning    
    #G1 Z20 F3000                   ; move nozzle away from bed
    #LINE_PURGE

gcode:
    ; Get first-layer bed-temp from slicer
    {% set target_bed = params.BED|int %}
    ; Get first-layer extruder-temp from slicer
    {% set target_extruder = params.EXTRUDER|int %}
    G90 ; use absolute coordinates 
    M83 ; extruder relative mode 
    M140 S{target_bed} ; set bed temp
    M190 S{target_bed} ; wait for bed temp
    G28 ; home all axis 
    M104 S{target_extruder} ; set extruder temp 
    SMART_PARK
    M109 S{target_extruder} ; wait for extruder temp 
    LINE_PURGE
    G92 E0

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-25 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y-10} F3600       ; park nozzle at rear
    M84                            ; disable steppers
  
[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E35 F300                    ; load
   #G1 E20 F150                    ; prime nozzle with filament 
   M82                            ; set extruder to absolute
    
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-60 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
    {% set HOME_CURRENT_RATIO = 0.35 %} # by default we are dropping the motor current during homing. you can adjust this value if you are having trouble with skipping while homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    G90
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
    {% set HOME_CURRENT_RATIO = 0.35 %} # by default we are dropping the motor current during homing. you can adjust this value if you are having trouble with skipping while homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT_RATIO * RUN_CURRENT_Y}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    G90
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    G90
    G28 Z
    G1 Z30 F7500

[homing_override]
axes: xyz
set_position_z: 0
gcode:
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    SAVE_GCODE_STATE NAME=STATE_HOME_OVERRIDE

    # Home Z first, to avoid any situation where the nozzle might scrape the bed
    {% if home_all or 'Z' in params %}
        _HOME_Z
    {% endif %}

    {% if home_all or 'X' in params %}
        _HOME_X
    {% endif %}

    {% if home_all or 'Y' in params %}
        _HOME_Y
    {% endif %}
    
    # G90
    # G0 X60 Y60 Z20 F3600 # move to bed center
    RESTORE_GCODE_STATE NAME=STATE_HOME_OVERRIDE

[gcode_macro M106]
gcode:
    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
    SET_FAN_SPEED FAN={fan} SPEED={speed}

[gcode_macro LED_OFF]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=LED_OFF

[gcode_macro LED_ON_HIGH]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=LED_ON_HIGH

[gcode_macro LED_ON_MED]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=LED_ON_MED

[gcode_macro LED_ON_LOW]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=LED_ON_LOW

[gcode_macro RAINBOW]
gcode:
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=panel_rainbow

[gcode_macro TEST_SPEED_OLD]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED_OLD
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED_OLD: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED_OLD

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(1)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(40)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    # Select which axis to test
    {% set axis = params.AXIS|default("XY")|upper %}
    {% set home = params.HOME|default(0)|int %}
    {% set scvs = params.SCV_|default(printer.configfile.settings.printer.square_corner_velocity)|int %}
    {% set zpos = params.ZPOS|default(20)|int %}
    {% set cruise = params.CRUISE_RATIO|default(0.0)|float %}


    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d, scv, %s, on axis %s" % (iterations, speed, accel, scvs, axis)) }
    
    # Home and get position for comparison later:
    {% if home == 1 %}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{80*60}
        M400 
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-4} Y{printer.toolhead.axis_maximum.y-4} F{80*60}
        G4 P1000 
        GET_POSITION
    {% endif %}

    # Go to starting position
    G0 Y{y_min} Z{zpos} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={cruise} SQUARE_CORNER_VELOCITY={scvs}

    {% for i in range(iterations) %}
      {% if axis == "XY" %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}

            # Small fill
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            G0 X{x_center_max-5} Y{y_center_max-5} F{speed*60}
            G0 X{x_center_min+5} Y{y_center_min+5} F{speed*60}
            
      {% elif axis == "Y" %}
        # Large pattern
            # Diagonals
            G0 Y{y_min} F{speed*60}
            G0 Y{y_max} F{speed*60}
            G0 Y{y_min} F{speed*60}
            G0 Y{y_max} F{speed*60}
            G0 Y{y_min} F{speed*60}
            G0 Y{y_max} F{speed*60}
            
            # Box
            G0 Y{y_min} F{speed*60}
            G0 Y{y_max} F{speed*60}
            G0 Y{y_min} F{speed*60}
            G0 Y{y_max} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 Y{y_center_min} F{speed*60}
            G0 Y{y_center_max} F{speed*60}
            G0 Y{y_center_min} F{speed*60}
            G0 Y{y_center_max} F{speed*60}
            G0 Y{y_center_min} F{speed*60}
            G0 Y{y_center_max} F{speed*60}
            
            # Small box
            G0 Y{y_center_min} F{speed*60}
            G0 Y{y_center_max} F{speed*60}
            G0 Y{y_center_min} F{speed*60}
            G0 Y{y_center_max} F{speed*60}

            # Small fill
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            G0 Y{y_center_max-5} F{speed*60}
            G0 Y{y_center_min+5} F{speed*60}
            
      {% elif axis == "X" %}
        # Large pattern
            # Diagonals
            G0 X{x_min} F{speed*60}
            G0 X{x_max} F{speed*60}
            G0 X{x_min} F{speed*60}
            G0 X{x_max} F{speed*60}
            G0 X{x_min} F{speed*60}
            G0 X{x_max} F{speed*60}
            
            # Box
            G0 X{x_min} F{speed*60}
            G0 X{x_max} F{speed*60}
            G0 X{x_min} F{speed*60}
            G0 X{x_max} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} F{speed*60}
            G0 X{x_center_max} F{speed*60}
            G0 X{x_center_min} F{speed*60}
            G0 X{x_center_max} F{speed*60}
            G0 X{x_center_min} F{speed*60}
            G0 X{x_center_max} F{speed*60}
            
            # Small box
            G0 X{x_center_min} F{speed*60}
            G0 X{x_center_max} F{speed*60}
            G0 X{x_center_min} F{speed*60}
            G0 X{x_center_max} F{speed*60}

            # Small fill
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
            G0 X{x_center_max-5} F{speed*60}
            G0 X{x_center_min+5} F{speed*60}
      {% else %}
          { action_respond_info("Please input AXIS= X, Y, or XY. Default is XY.") }
      {% endif %}
    
    {% endfor %}


    # Restore max speed/accel/cruise to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}
    {% if home == 1 %}
    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-4} Y{printer.toolhead.axis_maximum.y-4} F{80*60}
        G4 P1000 
        GET_POSITION
    {% endif %}

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[auto_speed]
#axis: diag_x, diag_y  ; One or multiple of `x`, `y`, `diag_x`, `diag_y`, `z`

#margin: 20            ; How far away from your axes to perform movements

#settling_home: 1      ; Perform settling home before starting Auto Speed
max_missed: 2.5        ; Maximum full steps that can be missed
endstop_samples: 5     ; How many endstop samples to take for endstop variance

#accel_min: 1000.0     ; Minimum acceleration test may try
#accel_max: 50000.0    ; Maximum acceleration test may try
#accel_accu: 0.05      ; Keep binary searching until the result is within this percentage

#velocity_min: 50.0    ; Minimum velocity test may try
#velocity_max: 5000.0  ; Maximum velocity test may try
#velocity_accu: 0.05   ; Keep binary searching until the result is within this percentage

#derate: 0.8           ; Derate discovered results by this amount

#validate_margin: Unset      ; Margin for VALIDATE, Defaults to margin
#validate_inner_margin: 20.0 ; Margin for VALIDATE inner pattern
#validate_iterations: 50     ; Perform VALIDATE pattern this many times

#results_dir: ~/printer_data/config ; Destination directory for graphs

#[mcu]
#serial: /dev/serial/by-id/usb-Klipper_Klipper_firmware_12345-if00

#[printer]
#kinematics: cartesian
#max_velocity: 300
#max_accel: 3000
#max_z_velocity: 5
#max_z_accel: 100

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE9,  EXP1_7=PE11, EXP1_9=<GND>,
    EXP1_2=PB0, EXP1_4=PE8, EXP1_6=PE10, EXP1_8=PE12, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,
    EXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays.

########################################
# TMC2209 configuration
########################################

#[tmc2209 stepper_x]
#uart_pin: PD5
#run_current: 0.800
#diag_pin:

#[tmc2209 stepper_y]
#uart_pin: PD0
#run_current: 0.800
#diag_pin:

#[tmc2209 stepper_z]
#uart_pin: PE1
#run_current: 0.800
#diag_pin:

#[tmc2209 extruder]
#uart_pin: PC6
#run_current: 0.600
#diag_pin:

#[tmc2209 extruder1]
#uart_pin: PD12
#run_current: 0.600
#diag_pin:

########################################
# TMC2130 configuration
########################################

#[tmc2130 stepper_x]
#cs_pin: PD5
#spi_software_miso_pin: PE15
#spi_software_mosi_pin: PE13
#spi_software_sclk_pin: PE14
#run_current: 0.800
#stealthchop_threshold: 999999
#diag1_pin: PC1

#[tmc2130 stepper_y]
#cs_pin: PD0
#spi_software_miso_pin: PE15
#spi_software_mosi_pin: PE13
#spi_software_sclk_pin: PE14
#run_current: 0.800
#stealthchop_threshold: 999999
#diag1_pin: PC3

#[tmc2130 stepper_z]
#cs_pin: PE1
#spi_software_miso_pin: PE15
#spi_software_mosi_pin: PE13
#spi_software_sclk_pin: PE14
#run_current: 0.650
#stealthchop_threshold: 999999
#diag1_pin: PC0

#[tmc2130 extruder]
#cs_pin: PC6
#spi_software_miso_pin: PE15
#spi_software_mosi_pin: PE13
#spi_software_sclk_pin: PE14
#run_current: 0.800
#stealthchop_threshold: 999999
#diag1_pin: PC2

#[tmc2130 extruder1]
#cs_pin: PD12
#spi_software_miso_pin: PE15
#spi_software_mosi_pin: PE13
#spi_software_sclk_pin: PE14
#run_current: 0.800
#stealthchop_threshold: 999999
#diag1_pin: PA0

[shaketune]
# result_folder: ~/printer_data/config/ShakeTune_results
#    The folder where the results will be stored. It will be created if it doesn't exist.
# number_of_results_to_keep: 3
#    The number of results to keep in the result_folder. The oldest results will
#    be automatically deleted after each runs.
# keep_raw_csv: False
#    If True, the raw CSV files will be kept in the result_folder alongside the
#    PNG graphs. If False, they will be deleted and only the graphs will be kept.
show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for "system" macros that are not in the
#    printer.cfg file. If you want to see the macros in the webui, set this to True.
# timeout: 300
#    The maximum time in seconds to let Shake&Tune process the CSV files and generate the graphs.

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [stepper_z]
#*# position_endstop = 109.280
#*#
#*# [heater_bed]
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 19.321
#*# pid_ki = 0.968
#*# pid_kd = 96.363
